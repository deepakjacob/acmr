In order to make the application run for you, I have used mock / hard coded data.
Still the application uses both Synchronous and Asynchronous actions supported by the Redux-Thunk middleware.

Redux Actions are triggered in  client/app/container/earnings-expense-component's  handleRangeChange() method (line 46)
Uncomment line 47 to trigger an Async action which is going to fail anyway as you lack database setup
---------------------

 Running Project
    $ npm install 
    $ npm start
---------------------
Tech Stack
    - Typescript
    - React
    - Redux
        - Using Redux-Actions for the *Synchronous Actions* 
            - Reducer complexity is reduced by using handle actions.
            - All actions & reducers are type checked.

        - Using Redux-Thunk and Redux-Promise for the *Asynchronous Actions* 
            - Redux-Promise check whether *paylad* contains a promise object if yes, 
              then it passes it to reducers after passing it through *Redux-Thunk* and *Redux-Promise* middleware

    - D3 for visualizations
    
    - Blueprint JS for data tables and slider control.

    - Webpack with hot reloading baked in for faster development cycle.  This also maintains the state during component refresh.
    -SASS for styling components. Note that this is also hot compiled to CSS by *Webpack*
        - Features used - Mixins, Variables, Composing styles etc.
    
    - Also included a hotproxy (hot.proxy.js), which is running a *Node Express* server for acting as proxy server for the backend 
        - this is to work around browser security checks (the script and services may use different ports)

    Models
        - Declared as types to maintain object shape consistency (model.d.ts).

    ---------------

    Application Structure

     - Package client/app/container contains 2 Container components.
        - uses redux @connect for mapping props to state and stores - dispatch method.

     - Package client/app/components contains Presentational components.

     - Package client/app/reducers contains reducers implemented using handleActions using Redux-Action library.

     - Package client/app/actions - contains Sync & Async actions







               
